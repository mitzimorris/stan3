##
# Stan3 Shared Library Build Rules
##

# Shared library specific flags
override CXXFLAGS += -fPIC -fvisibility=hidden -fvisibility-inlines-hidden
override CXXFLAGS_SUNDIALS += -fPIC
override CPPFLAGS += -DSTAN3_BUILDING_LIBRARY

# Stan3 shared library source files  
STAN3_SHARED_SOURCES = \
	src/stan3/stan3_c_api.cpp \
	src/stan3/read_json_data.cpp \
	src/stan3/output_writers.cpp \
	src/stan3/hmc_output_writers.cpp \
	src/stan3/load_samplers.cpp \
	src/stan3/run_samplers.cpp \
	src/stan3/run_hmc_nuts.cpp

# Stan3 shared library object files
STAN3_SHARED_O = $(patsubst %.cpp,%$(STAN_FLAGS).o,$(STAN3_SHARED_SOURCES))

# Don't remove intermediate files
.PRECIOUS: %.o $(STAN3_SHARED_O) %.hpp

# Include dependency files
-include $(patsubst %.cpp,%.d,$(STAN3_SHARED_SOURCES))

# Rule to compile Stan3 shared library objects
src/stan3/%$(STAN_FLAGS).o : src/stan3/%.cpp
	@echo '--- Compiling Stan3 shared library: $< ---'
	@mkdir -p $(dir $@)
	$(COMPILE.cpp) $(OUTPUT_OPTION) $<

# Dependency file rule for Stan3 objects
src/stan3/%.d : src/stan3/%.cpp
	@mkdir -p $(dir $@)
	$(COMPILE.cpp) $(DEPFLAGS) $<

# Model compilation chain (copied from make/program but with PIC flags)
ifdef STAN_OPENCL
STANCFLAGS+= --use-opencl
endif

# Stan to C++ translation
%.hpp : %.stan bin/stanc$(EXE)
	@echo ''
	@echo '--- Translating Stan model to C++ code ---'
	$(WINE) bin/stanc$(EXE) $(STANCFLAGS) --o=$(subst  \,/,$@) $(subst  \,/,$<)

# Model dependency files
%.d: %.hpp

# Keep model objects if requested
ifeq ($(KEEP_OBJECT), true)
.PRECIOUS: %.o
endif

# Compile model objects with PIC for shared library
%.o : %.hpp $(USER_HEADER)
	@echo ''
	@echo '--- Compiling model C++ code for shared library ---'
	$(COMPILE.cpp) $(CXXFLAGS_PROGRAM) -fPIC -x c++ -o $(subst  \,/,$*).o $(subst \,/,$<)

# Conditional precompiled header dependency (following make/program pattern)
ifeq ($(CXX_TYPE),clang)
ifneq ($(PRECOMPILED_MODEL_HEADER),)
# For clang with PCH: depend on PCH
%_model.so : %.o $(STAN3_SHARED_O) $(SUNDIALS_TARGETS) $(MPI_TARGETS) $(TBB_TARGETS) $(PRECOMPILED_MODEL_HEADER)
	@echo '--- Linking Stan3 model shared library: $@ ---'
	@echo '  Model object: $<'
	@echo '  Stan3 objects: $(STAN3_SHARED_O)'
	$(LINK.cpp) -shared -lm -o $@ $< $(STAN3_SHARED_O) \
		$(LDLIBS) $(SUNDIALS_TARGETS) $(MPI_TARGETS) $(TBB_TARGETS)
else
# For clang without PCH: no PCH dependency
%_model.so : %.o $(STAN3_SHARED_O) $(SUNDIALS_TARGETS) $(MPI_TARGETS) $(TBB_TARGETS)
	@echo '--- Linking Stan3 model shared library: $@ ---'
	@echo '  Model object: $<'
	@echo '  Stan3 objects: $(STAN3_SHARED_O)'
	$(LINK.cpp) -shared -lm -o $@ $< $(STAN3_SHARED_O) \
		$(LDLIBS) $(SUNDIALS_TARGETS) $(MPI_TARGETS) $(TBB_TARGETS)
endif
else
# For non-clang: no PCH dependency
%_model.so : %.o $(STAN3_SHARED_O) $(SUNDIALS_TARGETS) $(MPI_TARGETS) $(TBB_TARGETS)
	@echo '--- Linking Stan3 model shared library: $@ ---'
	@echo '  Model object: $<'
	@echo '  Stan3 objects: $(STAN3_SHARED_O)'
	$(LINK.cpp) -shared -lm -o $@ $< $(STAN3_SHARED_O) \
		$(LDLIBS) $(SUNDIALS_TARGETS) $(MPI_TARGETS) $(TBB_TARGETS)
endif

# Ensure Stan3 shared objects depend on any necessary precompiled headers for clang
ifeq ($(CXX_TYPE),clang)
ifneq ($(PRECOMPILED_MODEL_HEADER),)
$(STAN3_SHARED_O) : $(PRECOMPILED_MODEL_HEADER)
endif
endif

# Dependencies for shared library targets that include Stan3 objects
-include $(patsubst %.cpp,%.d,$(STAN3_SHARED_SOURCES))

# Debug target to show what objects would be built
.PHONY: show-stan3-objects
show-stan3-objects:
	@echo 'STAN3_SHARED_SOURCES: $(STAN3_SHARED_SOURCES)'
	@echo 'STAN3_SHARED_O: $(STAN3_SHARED_O)'
	@echo 'STAN_FLAGS: $(STAN_FLAGS)'
	@echo 'CXX_TYPE: $(CXX_TYPE)'
	@echo 'PRECOMPILED_MODEL_HEADER: $(PRECOMPILED_MODEL_HEADER)'

# Test what would be built
.PHONY: test-deps
test-deps:
	@echo 'For bernoulli_model.so, would need:'
	@echo '  bernoulli.o (model object)'
	@echo '  STAN3_SHARED_O: $(STAN3_SHARED_O)'
	@echo '  SUNDIALS_TARGETS: $(SUNDIALS_TARGETS)'
	@echo '  MPI_TARGETS: $(MPI_TARGETS)' 
	@echo '  TBB_TARGETS: $(TBB_TARGETS)'
	@echo '  PRECOMPILED_MODEL_HEADER: $(PRECOMPILED_MODEL_HEADER)'

# Convenience targets
.PHONY: bernoulli-shared
bernoulli-shared: bernoulli_model.so

# Clean targets
.PHONY: clean-shared
clean-shared:
	@echo '  removing shared library objects'
	$(RM) $(STAN3_SHARED_O)
	$(RM) $(wildcard *_model.so)
	$(RM) $(wildcard src/test/test-models/*_model.so)
